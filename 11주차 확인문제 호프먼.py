# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kw7s3ouMvG0rogYfGIgUwVNhZbYX1ecF
"""

import heapq

class HuffmanNode:
    def __init__(self, frequency, symbol=None, left=None, right=None):
        self.frequency = frequency
        self.symbol = symbol
        self.left = left
        self.right = right

    def is_leaf(self):
        return self.left is None and self.right is None

    def __lt__(self, other):
        return self.frequency < other.frequency

class HuffmanCoding:
    def __init__(self, frequencies):
        self.nodes = [HuffmanNode(freq, symbol) for symbol, freq in frequencies.items()]
        heapq.heapify(self.nodes)
        self.codes = {}
        self.build_tree()

    def build_tree(self):
        while len(self.nodes) > 1:
            left = heapq.heappop(self.nodes)
            right = heapq.heappop(self.nodes)
            merged = HuffmanNode(left.frequency + right.frequency, left=left, right=right)
            heapq.heappush(self.nodes, merged)

        if self.nodes:
            root = heapq.heappop(self.nodes)
            self.generate_codes(root)

    def generate_codes(self, node, current_code=""):
        if node.is_leaf():
            self.codes[node.symbol] = current_code or "0"
        else:
            if node.left:
                self.generate_codes(node.left, current_code + "0")
            if node.right:
                self.generate_codes(node.right, current_code + "1")

    def get_codes(self):
        return self.codes

# Example usage
if __name__ == "__main__":
    # Input frequencies as per Table 9.1.2
    frequencies = {
        '!': 2,
        '@': 3,
        '#': 7,
        '$': 8,
        '%': 12
    }

    # Create HuffmanCoding instance and get the codes
    huffman_coding = HuffmanCoding(frequencies)
    codes = huffman_coding.get_codes()

    # Output the resulting Huffman codes
    print("Huffman Codes for the given frequencies:")
    for symbol, code in codes.items():
        print(f"{symbol}: {code}")